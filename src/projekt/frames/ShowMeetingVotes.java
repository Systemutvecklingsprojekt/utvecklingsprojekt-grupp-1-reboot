/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekt.frames;

import javax.swing.JTable;
import projekt.Refactor;
import projekt.User;
import projekt.helpers.Database;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Amand
 */
public class ShowMeetingVotes extends javax.swing.JFrame {

    private int meetingID;
    private User user;
    private javax.swing.JTable table2;

    public ShowMeetingVotes(int meetingID, User user) {

        initComponents();
        this.meetingID = meetingID;
        this.user = user;
        insertValues();
        
    }

    private void insertValues() {
        try {
            ResultSet rs = Database.fetchRows("SELECT COUNT(user_votes.DateTimeID), Proposed_Date_Time.Date, Proposed_Date_Time.Time"
                    + " FROM Proposed_Date_Time"
                    + " JOIN user_votes ON Proposed_Date_Time.DateTimeID = user_votes.DateTimeID"
                    + " WHERE user_votes.DateTimeID = 4");
            table2 = new JTable(Refactor.tableModelBuilder(rs));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jScrollPane1.setViewportView(table2);
        table2.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTMeetingTimes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jBDetermineMeeting = new javax.swing.JButton();
        jBBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTMeetingTimes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTMeetingTimes);

        jLabel1.setText("Välj vilket möte du vill fastställa");

        jBDetermineMeeting.setBackground(new java.awt.Color(204, 204, 255));
        jBDetermineMeeting.setText("Fastställ möte");
        jBDetermineMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDetermineMeetingActionPerformed(evt);
            }
        });

        jBBack.setBackground(new java.awt.Color(204, 204, 255));
        jBBack.setText("Tillbaka");
        jBBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jBBack, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBDetermineMeeting, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDetermineMeeting)
                    .addComponent(jBBack))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBackActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBBackActionPerformed

    private void jBDetermineMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDetermineMeetingActionPerformed
        
        int dateTimeID = (int) jTMeetingTimes.getValueAt(jTMeetingTimes.getSelectedRow(), 0);
        try {
            String date = Database.fetchSingle("Select Date from Proposed_Date_Time where DateTimeID = " + dateTimeID);
            String time = Database.fetchSingle("Selcet Time from Proposed_Date_Time where DateTimeID = " + dateTimeID);
            String description = Database.fetchSingle("Select Description from Proposed_Meeting where ProposedMeetingID = (Select ProsedMeetingID from Proposed_Date_Time where DateTimeID = " + dateTimeID + ")");
            Database.executeUpdate("Insert into Meeting values ('" + date + "', '" + time + "', '" + description + "', " + user.getUserID() + ")" );
            
            Database.executeUpdate("Insert into Meeting_Attandence values (" + dateTimeID + ",(Select UserID from Invites where ProposedMeeting = " + meetingID + "), J");
        }
        catch (SQLException ex) {
           
        }
        
    }//GEN-LAST:event_jBDetermineMeetingActionPerformed

    /*
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowMeetingVotes(meetingID, user).setVisible(true);
            }
        });
    }
       */ 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBack;
    private javax.swing.JButton jBDetermineMeeting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTMeetingTimes;
    // End of variables declaration//GEN-END:variables
}
