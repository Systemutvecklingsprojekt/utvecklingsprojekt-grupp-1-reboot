package projekt.frames;

import java.sql.SQLException;
import java.util.ArrayList;
import projekt.helpers.Database;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.JOptionPane;
import projekt.User;

/**
 *
 * @author Team 1
 */
public class MeetingVotes extends javax.swing.JFrame {

    private int proposedMeetingID;
    private static User user;
    private ArrayList<Integer> dateTimes;
    private ArrayList<String> votedTimeID;

    /**
     * Creates new form MeetingVotes
     */
    public MeetingVotes(int proposedMeetingID, User user) {
        this.proposedMeetingID = proposedMeetingID;
        this.user = user;
        initComponents();
        fillCBDate();
        dateTimes = new ArrayList<Integer>();
        getUserVotes();
    }

    /**
     * Metod som hämtar inloggade användarens alla röster på möten
     */
    private void getUserVotes() {
        this.votedTimeID = new ArrayList<>();
        try {
            votedTimeID = Database.fetchColumn("SELECT DateTimeID FROM user_votes where UserID = " + user.getUserID());
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCBDate = new javax.swing.JComboBox<>();
        jBAddTime = new javax.swing.JButton();
        jBSendAvailable = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAChosenTimes = new javax.swing.JTextArea();
        jBDeleteTime = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCBDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBDateActionPerformed(evt);
            }
        });

        jBAddTime.setBackground(new java.awt.Color(204, 204, 255));
        jBAddTime.setText("Lägg till tid");
        jBAddTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddTimeActionPerformed(evt);
            }
        });

        jBSendAvailable.setBackground(new java.awt.Color(204, 204, 255));
        jBSendAvailable.setText("Skicka tillgänglighet");
        jBSendAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSendAvailableActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setText("Tillbaka");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Mina valda tider:");

        jTAChosenTimes.setEditable(false);
        jTAChosenTimes.setColumns(20);
        jTAChosenTimes.setRows(5);
        jScrollPane1.setViewportView(jTAChosenTimes);

        jBDeleteTime.setBackground(new java.awt.Color(204, 204, 255));
        jBDeleteTime.setText("Ta bort alla valda tider");
        jBDeleteTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteTimeActionPerformed(evt);
            }
        });

        jLabel2.setText("Välj tillgänlighet för möte:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBSendAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jCBDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBDeleteTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBAddTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAddTime))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jBDeleteTime)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jBSendAvailable))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBDateActionPerformed

    }//GEN-LAST:event_jCBDateActionPerformed
    /**
     * Metod som lägger till valda tider från comboboxen i textarean, så att
     * användare ser vilka tider hen valt.
     *
     * @param evt
     */
    private void jBAddTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddTimeActionPerformed
        String date = jCBDate.getSelectedItem().toString();
        String id[] = date.split(",");
        boolean alreadyVoted = false; //Variabel som håller koll om användaren redan röstat
        for (String ID : votedTimeID) {
            try {
                if (ID.equals(id[0])) {
                    alreadyVoted = true;
                }
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
        }
        if (alreadyVoted == false) {
            dateTimes.add(Integer.parseInt(id[0]));
            String oldLabel = jTAChosenTimes.getText();
            jTAChosenTimes.setText(oldLabel + id[0] + ": " + id[1] + ", " + id[2] + "\n");
        } else {
            JOptionPane.showMessageDialog(null, "Du har redan röstat på denna mötestid");
        }
    }//GEN-LAST:event_jBAddTimeActionPerformed

    /**
     * Metod som skickar valda tider till databasen och lagrar info om antal
     * röster på ett visst möte.
     */
    private void jBSendAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSendAvailableActionPerformed

        ResultSet rs;

        String alreadyVoted = "SELECT UserID, DateTimeID, COUNT(*)\n"
                + " FROM user_votes\n"
                + " WHERE UserID = " + user.getUserID() + " AND DateTimeID = " + proposedMeetingID + "\n"
                + " GROUP BY UserID, DateTimeID\n"
                + " HAVING COUNT(*) > 1;"; //Fråga som lagras i variabel för att hitta vilka möten (DateTimeID)användaren röstat på
        try {
            rs = Database.fetchRows(alreadyVoted); //FetchRows returnerar ett ResultSet som vi lagrar i variablen rs. 

            if (rs.next() == false) {

                for (Integer dateTime : dateTimes) {

                    Database.executeUpdate("INSERT INTO user_votes (UserID, DateTimeID) VALUES (" + user.getUserID() + ", " + dateTime + ");");

                }
                JOptionPane.showMessageDialog(null, "Dina tider är skickade till mötesvärden!");
            } else {
                JOptionPane.showMessageDialog(null, "Du har redan anmält dig till detta möte!");
            }
            

        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Error");

        }
        this.dispose();
        new PersonalMeetings(user);
        
    }//GEN-LAST:event_jBSendAvailableActionPerformed
    /**
     * Metod för att ta bort valda mötestider
     *
     * @param evt
     */
    private void jBDeleteTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeleteTimeActionPerformed
        jTAChosenTimes.setText("");
        dateTimes.removeAll(dateTimes);
    }//GEN-LAST:event_jBDeleteTimeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Metod som fyller comboboxen med valbara tider för valt möte
     */
    private void fillCBDate() {
        //Skapar en sträng av dateTimeID, Date och time som vi fyller comboboxen med
        String query = "Select CONCAT(DateTimeID,', ',Date,', ',Time) from Proposed_Date_Time where ProsedMeetingID = " + proposedMeetingID;
        ArrayList<String> dates = new ArrayList<>();
        try {
            ResultSet rs = Database.fetchRows(query);
            while (rs.next()) {
                dates.add(rs.getString(1));
            }
            for (String date : dates) {
                jCBDate.addItem(date);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAddTime;
    private javax.swing.JButton jBDeleteTime;
    private javax.swing.JButton jBSendAvailable;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jCBDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAChosenTimes;
    // End of variables declaration//GEN-END:variables
}
