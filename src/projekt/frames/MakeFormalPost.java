/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekt.frames;

import java.sql.SQLException;
import java.util.ArrayList;
import projekt.helpers.Database;
import java.sql.ResultSet;
import projekt.User;

/**
 *
 * @author albin
 */
public class MakeFormalPost extends javax.swing.JFrame
{

	private int maxTags;
	private ArrayList<String> chosenTags;
        private User user;

	public MakeFormalPost(User user)
	{
            this.user = user;
            maxTags = 0;
            chosenTags = new ArrayList<>();

            initComponents();
            fillTags();
            jTFNewTag.setEnabled(true);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser2 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAPost = new javax.swing.JTextArea();
        jTFTitle = new javax.swing.JTextField();
        jCBTags = new javax.swing.JComboBox<>();
        jTFNewTag = new javax.swing.JTextField();
        jBUpload = new javax.swing.JButton();
        jbUploadFile = new javax.swing.JButton();
        jBAddTag = new javax.swing.JButton();
        jLTags = new javax.swing.JLabel();
        jlUplodedFile = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTAPost.setColumns(20);
        jTAPost.setRows(5);
        jScrollPane1.setViewportView(jTAPost);

        jTFTitle.setText("Rubrik");

        jCBTags.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCBTagsMouseReleased(evt);
            }
        });

        jTFNewTag.setText("Skriv ny tagg...");
        jTFNewTag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTFNewTagMouseReleased(evt);
            }
        });

        jBUpload.setText("Dela");
        jBUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBUploadActionPerformed(evt);
            }
        });

        jbUploadFile.setText("Ladda upp fil");
        jbUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUploadFileActionPerformed(evt);
            }
        });

        jBAddTag.setText("Lägg till tagg");
        jBAddTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddTagActionPerformed(evt);
            }
        });

        jLTags.setText("Taggar: ");

        jlUplodedFile.setText("Fil: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbUploadFile)
                        .addGap(46, 46, 46)
                        .addComponent(jlUplodedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCBTags, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTFNewTag, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBAddTag, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLTags, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jTFTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBTags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFNewTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAddTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTags)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbUploadFile)
                    .addComponent(jlUplodedFile))
                .addGap(37, 37, 37)
                .addComponent(jBUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUploadFileActionPerformed
		// TODO add your handling code here:
		int interval = jFileChooser2.showOpenDialog(this);
    }//GEN-LAST:event_jbUploadFileActionPerformed

	private void checkFullTags()
	{
		if (maxTags == 3) {
			jBAddTag.setEnabled(false);
		}
	}

    private void jBAddTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddTagActionPerformed
		// TODO add your handling code here:
		checkFullTags();
		boolean found = false;
		String tag = "";
		String oldTag = "";
		if (jCBTags.isEnabled()) {
			tag = jCBTags.getSelectedItem().toString();
			oldTag = jLTags.getText();
			if (chosenTags.isEmpty()) {
				chosenTags.add(tag);
				found = true;
				jLTags.setText(oldTag + "   " + tag);
			} else {
				for (String tagInList : chosenTags) {
					if (tagInList.equalsIgnoreCase(tag)) {
						found = true;
					}
				}
				if (!found) {
					chosenTags.add(tag);
					maxTags++;
					jLTags.setText(oldTag + "   " + tag);
				}
			}

		} else if (jTFNewTag.isEnabled()) {
			tag = jTFNewTag.getText();
			oldTag = jLTags.getText();
			if (chosenTags.isEmpty()) {
				chosenTags.add(tag);
				found = true;
				jLTags.setText(oldTag + "   " + tag);
			} else {
				for (String tagInList : chosenTags) {
					if (tagInList.equalsIgnoreCase(tag)) {
						found = true;
					}
				}
				if (!found) {
					chosenTags.add(tag);
					maxTags++;
					jLTags.setText(oldTag + "   " + tag);
				}
			}
		}
    }//GEN-LAST:event_jBAddTagActionPerformed

    private void jBUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBUploadActionPerformed
		String title = jTFTitle.getText();
		String post = jTAPost.getText();
		int userId = user.getUserID();
                String stringPostId = "";
                ArrayList<Integer> tagIds= new ArrayList<>();
                
		try{
                    insertTagsJosef(chosenTags);
                } catch(SQLException e){
                    e.printStackTrace();
                }
                try {
                    
                    Database.executeUpdate("INSERT into Post (UserID, timeStamp, title, description, typeID) VALUES (" + userId + ", CURRENT_TIMESTAMP, '" + title + "','" + post +"', 1);");
                    stringPostId = Database.fetchSingle("SELECT MAX(PostID) FROM Post;");
                    for(String tagName : chosenTags){
                        tagIds.add(Integer.parseInt(Database.fetchSingle("SELECT TagID FROM Tag WHERE TagName = '" + tagName + "';")));
                    }
                    
		} catch (SQLException e) {
                    e.printStackTrace();
                    System.out.println("error");
		}
                int postId = Integer.parseInt(stringPostId);
                try{
                    for(Integer tag : tagIds){
                        Database.executeUpdate("INSERT INTO Post_Tag (PostID, TagID) VALUES (" + postId + ", " + tag + ");");
                    }
                    
                } catch (SQLException e){
                    e.printStackTrace();
                    System.out.println("fel i dela");
                }
    }//GEN-LAST:event_jBUploadActionPerformed

    private void jTFNewTagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFNewTagMouseReleased
		jTFNewTag.setEnabled(true);
		jCBTags.setEnabled(false);
    }//GEN-LAST:event_jTFNewTagMouseReleased

    private void jCBTagsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCBTagsMouseReleased
		jCBTags.setEnabled(true);
		jTFNewTag.setEnabled(false);
    }//GEN-LAST:event_jCBTagsMouseReleased

	private void insertTagsJosef(ArrayList<String> tagsToCheck) throws SQLException
	{
		ArrayList<String> rsTags = new ArrayList<>();
		String querySize = "SELECT TagName FROM Tag";
		ResultSet rs = Database.fetchRows(querySize);
		while (rs.next()) {
			rsTags.add(rs.getString(1));

		}
		for (String rsTag : rsTags) {
			System.out.println(rsTag);
		}
		for (String var : tagsToCheck) {
			boolean flagDuplicate = false;
			for (String rsTag : rsTags) {
				if (var.equalsIgnoreCase(rsTag)) {
					flagDuplicate = true;
				}
			}

			if (flagDuplicate == false) {
				System.out.println("Inläggs: " + var);
				Database.executeUpdate("Insert Into Tag (TagName)Values('" + var + "')");
			}
		}

	}

	private void fillTags()
	{
		ArrayList<String> tags = new ArrayList<>();
		tags.add("Forskning");
		tags.add("Programmering");
		tags.add("Utbildning");

		for (String tag : tags) {
			jCBTags.addItem(tag);
		}
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAddTag;
    private javax.swing.JButton jBUpload;
    private javax.swing.JComboBox<String> jCBTags;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLTags;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAPost;
    private javax.swing.JTextField jTFNewTag;
    private javax.swing.JTextField jTFTitle;
    private javax.swing.JButton jbUploadFile;
    private javax.swing.JLabel jlUplodedFile;
    // End of variables declaration//GEN-END:variables

}
