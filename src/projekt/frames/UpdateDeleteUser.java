/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekt.frames;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import projekt.helpers.Database;

/**
 *
 * @author Amand
 */
public class UpdateDeleteUser extends javax.swing.JFrame {

    ResultSet rs;
    private javax.swing.JTable table2;

    /**
     * Creates new form UpdateDeleteUser
     */
    public UpdateDeleteUser() {

        initComponents();

        getResultset();
        try {
            table2 = new JTable(fyll(rs));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        jScrollPane1.setViewportView(table2);
        table2.setVisible(true);

    }

    public static void main(String[] args) {

        new UpdateDeleteUser().setVisible(true);

    }

    public void getResultset() {
        //Kör emot Databasen och hämtar raderna från User
        try {
            rs = Database.fetchRows("SELECT * FROM User");
        } catch (Exception ex) {
            System.out.println("Databasfel");
        }

        /*while (rs.next()) {
            Object column1 = hashMap.get("ALIEN_ID");
            Object column2 = hashMap.get("NAMN");
            Object column3 = hashMap.get("REGISTRERINGSDATUM");
            model.addRow(new Object[]{column1, column2, column3});
        }*/
    }

    public DefaultTableModel fyll(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();

        //kör igenom metadatan (ex hur många columner, och hämtar namnen)
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        changeInformationButton = new javax.swing.JButton();
        jtfID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Firstname", "Lastname", "Email", "Password", "Adminstatus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        deleteButton.setText("Ta bort");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        changeInformationButton.setText("Ändra information");
        changeInformationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeInformationButtonActionPerformed(evt);
            }
        });

        jtfID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfIDActionPerformed(evt);
            }
        });

        jLabel1.setText("Vänlige ange UserID på användaren du vill ändra eller ta bort");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfID)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changeInformationButton))
                        .addGap(132, 132, 132)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeInformationButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int tempId = Integer.parseInt(jtfID.getText());
        String updatePost = "Update Post SET UserID = 11 Where UserID = " + tempId;
        String delUser = "Delete from User where UserID =" + tempId;
        String delMeeting = "Delete from Meeting where UserID =" + tempId;
        String delMetAt = "Delete from Meeting_Attandence where UserID =" + tempId;
        String delPost = "Delete from Post where UserID =" + tempId;
        
        if(idKoll() == false) {
        return;
        }
        int dialog = JOptionPane.showConfirmDialog(null, "Är säker på att du vill ta bort denna användaren");
        if (dialog == JOptionPane.YES_OPTION) {
            int dialog2 = JOptionPane.showConfirmDialog(null, "Vill du spara användarens inlägg?");

            try {
                
                if (dialog2 == JOptionPane.YES_OPTION) {
                    Database.executeUpdate(updatePost);
                    Database.executeUpdate(delUser);
                    Database.executeUpdate(delMeeting);
                    Database.executeUpdate(delMetAt);
                    JOptionPane.showMessageDialog(null, "Användaren är nu borttagen");
                    new UpdateDeleteUser().setVisible(true);
                    this.dispose();

                } else if (dialog2 == JOptionPane.NO_OPTION) {
                    Database.executeUpdate(delPost);
                    Database.executeUpdate(delUser);
                    Database.executeUpdate(delMeeting);
                    Database.executeUpdate(delMetAt);
                    JOptionPane.showMessageDialog(null, "Användaren och dess inlägg är nu borttagna");
                    new UpdateDeleteUser().setVisible(true);
                    this.dispose();

                }

            } catch (Exception e) {
                System.out.print("Fel på sql");
            }

        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jtfIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfIDActionPerformed

    private void changeInformationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeInformationButtonActionPerformed
        int tempId = Integer.parseInt(jtfID.getText());
        try {
            String validId = Database.fetchSingle("SELECT UserID FROM User WHERE UserID =" + tempId);
            if (validId == null) {
                JOptionPane.showMessageDialog(null, "Vänligen ange ett valid ID");
                return;
            }
        } catch (Exception e) {
        }
        new EditUsers(tempId).setVisible(true);
    }//GEN-LAST:event_changeInformationButtonActionPerformed

    private boolean idKoll() {
    int tempId = Integer.parseInt(jtfID.getText());
        try {
            String validId = Database.fetchSingle("SELECT UserID FROM User WHERE UserID =" + tempId);
            if (validId == null) {
                JOptionPane.showMessageDialog(null, "Vänligen ange ett valid ID");
                new UpdateDeleteUser().setVisible(true);
                this.dispose();
                return false;
            }
        } catch (Exception e) {
            
        }
        return true;
    }

    
    
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeInformationButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jtfID;
    // End of variables declaration//GEN-END:variables
}
